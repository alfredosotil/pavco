package com.pavco.org.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BillFileAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillFileAllPropertiesEquals(BillFile expected, BillFile actual) {
        assertBillFileAutoGeneratedPropertiesEquals(expected, actual);
        assertBillFileAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillFileAllUpdatablePropertiesEquals(BillFile expected, BillFile actual) {
        assertBillFileUpdatableFieldsEquals(expected, actual);
        assertBillFileUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillFileAutoGeneratedPropertiesEquals(BillFile expected, BillFile actual) {
        assertThat(expected)
            .as("Verify BillFile auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillFileUpdatableFieldsEquals(BillFile expected, BillFile actual) {
        assertThat(expected)
            .as("Verify BillFile relevant properties")
            .satisfies(e -> assertThat(e.getUuid()).as("check uuid").isEqualTo(actual.getUuid()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getSize()).as("check size").isEqualTo(actual.getSize()))
            .satisfies(e -> assertThat(e.getMimeType()).as("check mimeType").isEqualTo(actual.getMimeType()))
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(
                e -> assertThat(e.getContentContentType()).as("check content contenty type").isEqualTo(actual.getContentContentType())
            )
            .satisfies(e -> assertThat(e.getIsProcessed()).as("check isProcessed").isEqualTo(actual.getIsProcessed()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillFileUpdatableRelationshipsEquals(BillFile expected, BillFile actual) {
        assertThat(expected)
            .as("Verify BillFile relationships")
            .satisfies(e -> assertThat(e.getClient()).as("check client").isEqualTo(actual.getClient()));
    }
}
