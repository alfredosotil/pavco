package com.pavco.org.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EquivalentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEquivalentAllPropertiesEquals(Equivalent expected, Equivalent actual) {
        assertEquivalentAutoGeneratedPropertiesEquals(expected, actual);
        assertEquivalentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEquivalentAllUpdatablePropertiesEquals(Equivalent expected, Equivalent actual) {
        assertEquivalentUpdatableFieldsEquals(expected, actual);
        assertEquivalentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEquivalentAutoGeneratedPropertiesEquals(Equivalent expected, Equivalent actual) {
        assertThat(expected)
            .as("Verify Equivalent auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEquivalentUpdatableFieldsEquals(Equivalent expected, Equivalent actual) {
        assertThat(expected)
            .as("Verify Equivalent relevant properties")
            .satisfies(e -> assertThat(e.getUuid()).as("check uuid").isEqualTo(actual.getUuid()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getDiscount()).as("check discount").isEqualTo(actual.getDiscount()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEquivalentUpdatableRelationshipsEquals(Equivalent expected, Equivalent actual) {
        assertThat(expected)
            .as("Verify Equivalent relationships")
            .satisfies(e -> assertThat(e.getProduct()).as("check product").isEqualTo(actual.getProduct()))
            .satisfies(e -> assertThat(e.getClient()).as("check client").isEqualTo(actual.getClient()));
    }
}
